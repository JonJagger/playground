name: alpha on main

on:
  push:
    branches:
      - main
    paths:
      - alpha/**
      - .github/workflows/alpha_main.yml


env:
  DOCKER_REGISTRY: ${{ vars.DOCKER_REGISTRY }}
  DOCKER_ORG_NAME: ${{ vars.DOCKER_ORG_NAME }}
  DOCKER_USERNAME: ${{ github.actor }}
  DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  REPO_NAME: ${{ vars.REPO_NAME }}
  SERVICE_NAME: alpha
  KOSLI_CLI_VERSION: ${{ vars.KOSLI_CLI_VERSION }}
  KOSLI_HOST: ${{ vars.KOSLI_HOST }}
  KOSLI_ORG: ${{ vars.KOSLI_ORG }}
  KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}

jobs:

  setup:
    name: Setup job variables
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.variables.outputs.image_tag }}
      image_name: ${{ steps.variables.outputs.image_name }}
      tagged_image_previous: ${{ steps.variables.outputs.tagged_image_previous }}
      image_tar_filename: ${{ steps.variables.outputs.image_tar_filename }}
    steps:
      - name: Set outputs
        id: variables
        run: |
          image_tag="${GITHUB_SHA:0:7}"
          image_uri="${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG_NAME }}/${{ env.REPO_NAME }}-${{ env.SERVICE_NAME }}"
          image_name="${image_uri}:${image_tag}"
          tagged_image_previous="${image_uri}:previous"
          image_tar_filename="/tmp/${{ env.REPO_NAME }}-${{ env.SERVICE_NAME }}:previous.tar"            
          echo "image_tag=${image_tag}" >> ${GITHUB_OUTPUT}          
          echo "image_name=${image_name}" >> ${GITHUB_OUTPUT}          
          echo "tagged_image_previous=${tagged_image_previous}" >> ${GITHUB_OUTPUT}
          echo "image_tar_filename=${image_tar_filename}" >> ${GITHUB_OUTPUT}


  build:
    name: Build docker image and push it to registry
    runs-on: ubuntu-latest
    needs: [setup]
    permissions:
      id-token: write
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4.1.1
      with:
        fetch-depth: 1

#    - name: Set up QEMU
#      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ env.DOCKER_PASSWORD }}

    - name: Build and push Docker image to the GHCR
      id: docker_build
      uses: docker/build-push-action@v5
      with:
        context: ${{ env.SERVICE_NAME }}
        # platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ needs.setup.outputs.image_name }},${{ needs.setup.outputs.tagged_image_previous }}
        cache-from: type=registry,ref=${{ needs.setup.outputs.tagged_image_previous }}
        cache-to: type=inline,mode=max

    - name: Tar Docker image
      run: |
        docker pull ${{ needs.setup.outputs.image_name }}
        docker image save ${{ needs.setup.outputs.image_name }} --output ${{ needs.setup.outputs.image_tar_filename }}

    - name: Cache Docker image
      uses: actions/cache@v4.0.0
      with:
        path: ${{ needs.setup.outputs.image_tar_filename }}
        key: ${{ needs.setup.outputs.image_name }}


  lint:
    name: Run rubocop linter
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4.1.1
      with:
        fetch-depth: 1

    - name: Run Rubocop linter on source
      run: |
        cd "${{ env.SERVICE_NAME }}"
        make lint


  deploy:
    runs-on: ubuntu-latest
    needs: [setup, build]
    steps:
    - uses: actions/checkout@v4.1.1
      with:
        fetch-depth: 1

    - name: Fake a deployment
      run: |
        docker pull ${{ needs.setup.outputs.image_name }}
        docker compose up --wait

    - name: Setup Kosli cli
      uses: kosli-dev/setup-cli-action@v2
      with:
        version:
          ${{ env.KOSLI_CLI_VERSION }}

    - name: Create a Snapshot
      run: |
        docker pull ${{ needs.setup.outputs.image_name }}
        KOSLI_ENVIRONMENT=docker
        kosli snapshot docker "${KOSLI_ENVIRONMENT}"
        # Error message (from kosli CLI) says...
        # ignoring container 'alpha_server' as it uses an image with no repo digest
        # Yet...
        #  $ docker inspect --format='{{index .RepoDigests 0}}' ghcr.io/kosli-dev/playground-alpha:$(git rev-parse --short=7 HEAD)
        # Says...
        #  ghcr.io/kosli-dev/playground-alpha@sha256:1cda5fd7ae473429d91ab7334c92ed4bdd9e5b6551d2f8377b339c438206caa0
        # Why does the Kosli CLI think there is no repo digest?
        # Is it because of multi-architecture?
        # On a real CI run, the host OS is presumably amd64, on my macbook it is presumably arm64 ? 
